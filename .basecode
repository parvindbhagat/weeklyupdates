============================== working code for activities.ejs==============================================
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Activities</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <link rel="stylesheet" href="/stylesheets/style.css">
  <style>
    table {
      width: 100%;
      border-collapse: collapse;
    }
    th, td {
      border: 1px solid #ddd;
      padding: 8px;
    }
    th {
      background-color: #f2f2f2;
      text-align: left;
    }
    tr:nth-child(even) {
      background-color: #f9f9f9;
    }
    tr:hover {
      background-color: #ddd;
    }
  </style>
</head>
<body>
    <nav class="navbar ">
        <div class="">
          <a class="navbar-brand" href="/">
            <img src="/images/logo-ic.png" alt="Chrysalis" >
          </a>
          <a class="navbar-brand" href="/">
            <img src="/images/logo-tx.png" alt="Chrysalis" >
          </a>
        </div>
      </nav>

    <h1 style="text-align: center;" >Activities for Week <%= currentWeekNumber %> (from <%= startDate.toDateString() %> to <%= endDate.toDateString() %>)</h1>
  <% Object.keys(groupedActivities).forEach(activityType => { %>
    <h2><%= activityType %></h2>
    <table border="1">
      <thead>
        <tr>
          <th>Type</th>
          <th>Name</th>
          <th>Start Date</th>
          <th>End Date</th>
          <th>Resource</th>
          <th>Remarks</th>
          <th>Week Number</th>
          <th>Status</th>
          <th>Created On</th>
          <th>Updated On</th>
        </tr>
      </thead>
      <tbody>
        <% groupedActivities[activityType].forEach(activity => { %>
          <tr>
            <td><%= activity.activityType %></td>
            <td><%= activity.activityName %></td>
            <td><%= activity.startDate %></td>
            <td><%= activity.endDate %></td>
            <td><%= activity.resource %></td>
            <td><%= activity.remarks %></td>
            <td><%= activity.weekNumber %></td>
            <td><%= activity.Status ? 'Completed' : 'Ongoing' %></td>
            <td><%= activity.CreatedOn.toLocaleDateString('en-GB') %></td>
            <td><%= activity.updatedOn.toLocaleDateString('en-GB') %></td>
          </tr>
        <% }); %>
      </tbody>
    </table>
  <% }); %>
</body>
</html>
==================================================================================

======================== auth middleware =========================================

function authMiddleware(req, res, next) {
  if (req.session && req.session.isAuthenticated) {
      return next();
  } else {
      res.redirect('/auth');
  }
}

module.exports = authMiddleware;

====================================================================================
======================== auth router and passcode matching =========================

const express = require('express');
const session = require('express-session');
const authMiddleware = require('./authMiddleware');
const app = express();

app.use(session({
    secret: 'your_secret_key',
    resave: false,
    saveUninitialized: true
}));

app.get('/auth', (req, res) => {
    res.render('auth');
});

app.post('/auth', (req, res) => {
    const { code } = req.body;
    const validCode = '1234'; // Replace with your actual code

    if (code === validCode) {
        req.session.isAuthenticated = true;
        res.redirect('/createactivity');
    } else {
        res.redirect('/auth');
    }
});

app.get('/createactivity', authMiddleware, (req, res) => {
    res.render('createactivity');
});

app.get('/', (req, res) => {
    res.render('index');
});

app.listen(3000, () => {
    console.log('Server is running on port 3000');
});

================================================================================
========================= auth template auth.ejs ===============================

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Authentication</title>
</head>
<body>
    <h1>Enter Access Code</h1>
    <form action="/auth" method="POST">
        <input type="text" name="code" required>
        <button type="submit">Submit</button>
    </form>
</body>
</html>
===================================================================================
========================= Countdown.js =======================================

document.addEventListener('DOMContentLoaded', () => {
  const sessions = window.sessions;
  const timerElement = document.getElementById('timer');
  const activityDetailsElement = document.getElementById('activity-details');
  console.log(sessions);

  function getNextSession(sessions) {
      const now = new Date();
      return sessions.filter(session => new Date(session.startDateTime) > now).sort((a, b) => new Date(a.startDateTime) - new Date(b.startDateTime))[0];
  }

  function updateTimer() {
      const nextSession = getNextSession(sessions);
      if (!nextSession) {
          timerElement.textContent = 'No upcoming activities';
          activityDetailsElement.textContent = '';
          return;
      }

      const now = new Date().getTime();
      const countDownDate = new Date(nextSession.startDateTime).getTime();
      const distance = countDownDate - now;

      if (distance < 0) {
          timerElement.textContent = 'Activity is ongoing or has passed';
          activityDetailsElement.textContent = '';
          return;
      }

      const days = Math.floor(distance / (1000 * 60 * 60 * 24));
      const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
      const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
      const seconds = Math.floor((distance % (1000 * 60)) / 1000);

      document.getElementById('days').textContent = days;
      document.getElementById('hours').textContent = hours;
      document.getElementById('minutes').textContent = minutes;
      document.getElementById('seconds').textContent = seconds;

      activityDetailsElement.textContent = `Next Activity: ${nextSession.activityName} by (${nextSession.resource})`;
  }

  setInterval(updateTimer, 1000);
  updateTimer();
});
====================================================================================================

sessions.forEach((session) => {
  let now = new Date();
  let start = new Date(session.startDateTime);
  let startTimeSession = start;
  let distance  = startTimeSession - now
  console.log(distance);
})


================================ HOW TO USE =======================================================
1. All tasks assigned in Microsoft Project for the current week will appear here.
2. To log work on a task, click the SAVE button to enter the details.
3 .Add the Actual Start and Finish Date and the number of hours worked on the task.
4. If a task is incomplete, choose No, needs more work. This allows you to update it later with additional work hours.
5. If a task is complete, enter the details and choose the option to mark it as complete and submit.
6. If you are working on a previously incomplete task, enter the hours worked on that particular day.
7. Please update the tasks which are incomplete every day.
8. At the end of the week, click SUBMIT TO MANAGER so the manager can review and approve your tasks and work done.
9. If you are working on a task not assigned by the Project Manager, click ADD A TASK and enter the details. If a task is incomplete, choose No, needs more work. This allows you to update it later with additional work hours. If a task is complete, enter the details and choose the option to mark it as complete and submit.