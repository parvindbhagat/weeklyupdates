<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>My Tasks</title>
  <link rel="stylesheet" href="https://use.typekit.net/oov2wcw.css" />
  <link
    href="https://cdn.jsdelivr.net/npm/remixicon@4.3.0/fonts/remixicon.css"
    rel="stylesheet"/>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <link rel="stylesheet" href="/stylesheets/style.css">
  <style>
    .readonly{
      pointer-events: none;
      background-color: #f8f9fa;
      border: 1px solid red;
    }
  </style>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
  <!-- script to show/hide tablediv if its empty and show/hide save and update btns. -->
  <script>
    document.addEventListener('DOMContentLoaded', () => {
        window.activities = <%- JSON.stringify(incompleteTasks) %>;
        let tablediv = document.querySelector('.tablediv');
        const nothing = document.querySelector('.nothingToShow');
        // console.log(activities.length);

        let totalwork = 0;
        activities.forEach(act => {
          totalwork += parseFloat(act.actualWork);
        });
        document.getElementById('totalWork').innerText = totalwork;

        if (activities.length === 0) {
            tablediv.classList.add('hidden');
            nothing.classList.remove('hidden');
        } else {
            nothing.classList.add('hidden');
            tablediv.classList.remove('hidden');            // Populate the table with activities
            const saveBtns = document.querySelectorAll('.save-btn');
            const updateBtns = document.querySelectorAll('.update-btn');
            saveBtns.forEach(btn => {
                const rowId = btn.getAttribute('data-id');                
                const activity = activities.find(act => act._id === rowId);
                if (activity) {
                    if (activity.saved === 1) {
                        btn.classList.add('hidden');
                    } else {
                      btn.classList.remove('hidden');
                    }
                }
              });
              updateBtns.forEach(btn => {
                const rowId = btn.getAttribute('data-id');
                const activity = activities.find(act => act._id === rowId);
                if (activity) {
                    if (activity.saved === 1) {
                        btn.classList.remove('hidden');
                    } else {
                        btn.classList.add('hidden');
                    }

                  if(activity.submitted === 2){
                    btn.disabled = true;
                  }
                }
            });
        }
    });
</script>
<!-- Below script to trigger save modal -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const saveButtons = document.querySelectorAll('.save-btn');
    saveButtons.forEach(button => {
        const rowId = button.getAttribute('data-id');
        const row = document.getElementById(`row-${rowId}`);

        button.addEventListener('click', function() {
            // Extract data from the row
            const projectName = row.children[0].innerText;
            const taskName = row.children[1].innerText;
            const scheduledStart = row.children[2].innerText;
            const scheduledFinish = row.children[3].innerText;
            const actualStart = row.children[4].innerText;
            const actualFinish = row.children[5].innerText;
            const actualWork = row.children[6].innerText;
            const comment = row.children[9].innerText;
            const completed = row.children[8].innerText;

            // Populate the form fields in the modal
            document.getElementById('projectName').value = projectName;
            document.getElementById('taskName').value = taskName;
            document.getElementById('scheduledStart').value = scheduledStart;
            document.getElementById('scheduledFinish').value = scheduledFinish;
            document.getElementById('actualStart').value = actualStart;
            document.getElementById('actualFinish').value = actualFinish;
            document.getElementById('actualWork').value = actualWork;
            document.getElementById('comment').value = comment;
            document.getElementById('status_sv').value = completed
            document.getElementById('activityId').value = rowId;

            // Show the modal if submitted is "No"
                const saveModal = new bootstrap.Modal(document.getElementById('saveModal'));
                saveModal.show();            
        });
    });
});
</script>
<!-- Below script to trigger update modal -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const updateButtons = document.querySelectorAll('.update-btn');
    updateButtons.forEach(button => {
        const rowId = button.getAttribute('data-id');
        const row = document.getElementById(`row-${rowId}`);
        // const submitted = row.children[8].innerText;

        // Disable the button if submitted is "Yes"
        // if (submitted === "0" || submitted === "1" ) {
        //     button.disabled = false;
        // } else {
        //   button.disabled = true;
        // }

        button.addEventListener('click', function() {
            // Extract data from the row
            const projectName = row.children[0].innerText;
            const taskName = row.children[1].innerText;
            const scheduledStart = row.children[2].innerText;
            const scheduledFinish = row.children[3].innerText;
            const actualStart = row.children[4].innerText;
            // const actualFinish = row.children[5].innerText;
            const actualWork = row.children[6].innerText;
            const status = row.children[10].innerText;
            const comment = row.children[9].innerText;

            // console.log("value of submitted is: ", submitted);
            // Populate the form fields in the modal
            document.getElementById('projectName_uf').value = projectName;
            document.getElementById('taskName_uf').value = taskName;
            document.getElementById('scheduledStart_uf').value = scheduledStart;
            document.getElementById('scheduledFinish_uf').value = scheduledFinish;
            document.getElementById('actualStart_uf').value = actualStart;
            // document.getElementById('actualFinish_uf').value = actualFinish;
            document.getElementById('workSoFar_uf').value = actualWork;
            // document.getElementById('actualWork_uf').value = actualWork;
            // document.getElementById('comment_uf').value = comment;
            // document.getElementById('status_uf').value = status;
            document.getElementById('activityId_uf').value = rowId;


                const updateModal = new bootstrap.Modal(document.getElementById('updateModal'));
                updateModal.show();
            
        });
    });
});

</script>
<!-- below script  to show/hide my team btn  and admin console btn. -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  const adminBtn = document.getElementById('adminBtn').parentElement; 
  const myTeamBtn = document.getElementById('myTeamBtn').parentElement;
  const role = "<%= resourceDetails.resourceRole %>";
  if (role === "Manager") {      
      myTeamBtn.classList.remove('hidden');
      // console.log("showing my team btn");
  }else{
    myTeamBtn.classList.add('hidden');
      // console.log("hiding taskTable");
  }
  if (role === "Admin") {
    adminBtn.classList.remove('hidden');
    myTeamBtn.classList.remove('hidden');
  } else{
    adminBtn.classList.add('hidden');
  }
});
</script>
<div class="content">
  <nav class="navbar">
    <a class="navbar-brand" href="/home">
      <img src="/images/logo.png" alt="Chrysalis" >
    </a>
  </nav>

  <% if (msg2) { %>
    <div class="alert alert-warning alert-dismissible fade show" role="alert">
        <%= msg2 %>
        
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close">
            
    </div>
    
  <% } %>

  <h1 style=" margin: 3rem; text-align: center;">Welcome, <%= resourceDetails.resourceName.split(' ')[0] %>! </h1>
  <div class="d-flex flex-wrap flex-row-reverse gap-3 mb-3">
    <form style="display: inline-block; margin-right: 3rem;" action="/logout" method="POST">
      <button type="submit" class="btn rounded">Logout</button>
    </form>
    <button><a class="me-3" href="/myreport">My Report</a></button>
    <button><a class="me-3" href="/home">Home</a></button> 
    <button><a class="me-3" id="adminBtn" href="/admin">Admin Console</a></button>
    <button><a class="me-3" id="myTeamBtn" href="/manager">My Team</a></button>
    <!-- HOW IT WORKS Button trigger modal -->
  <button type="button" class="btn " data-bs-toggle="modal" data-bs-target="#staticBackdropHow">
    How it works?
  </button>
    <!-- <details class="me-3">
      <summary>HOW it works?</summary>
      <p>Save a tasks that you have worked on, through this week. In the end of week you can click 'Submit' to send all the saved items to manager for approval. </p>
    </details> -->
  </div>
  <% if (resourceDetails.managerComment) { %>
    <div class="alert alert-danger alert-dismissible fade show m-2" role="alert">
      <h4>Reassign remarks by Manager</h4>
        <%= resourceDetails.managerComment %>
        
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close">
            
    </div>  
  <% } %>
  <div class="d-flex flex-wrap justify-content-around mb-4">
    <h3 style=" margin-top: 3rem;"><strong>Email</strong>: <%= resourceDetails.resourceEmail %></h3>
    <h3 style=" margin-top: 3rem;"><strong>Department</strong>: <%= resourceDetails.resourceGroup %></h3>
    <h3 style=" margin-top: 3rem;"><strong>Manager</strong>: <%= resourceDetails.resourceManagerName %></h3>
    <h3 style=" margin-top: 3rem;"><strong>Function</strong>: <%=resourceDetails.resourceFunction %></h3>
  </div>
  
  <% if (msg) { %>
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <%= msg %>
        
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close">
            
    </div>  
  <% } %>
  
  <div class="nothingToShow hidden">
    <h3 style="text-align: center; margin-bottom: 2rem 0 0 0;">Nothing to Show! No task assigned by Project Manager for this week. Add a NEW task to enter your work details.</h3>
  </div>
  
  
  <div class="tablediv mb-50 p-2 ">
    <h3 style="text-align: center; margin: 2rem;">My Tasks this week (<%= startDate.toLocaleDateString('en-GB') %> To <%= endDate.toLocaleDateString('en-GB') %>)</h3>
      <table class="table-striped table-auto m-2 border border-gray-300" >
        <thead >
          <tr>
            <th  class="bg-warning">Client</th>
              <th  class="bg-warning">Intervention</th>
              <th  class="bg-warning">Task Name</th>
              <th  class="bg-warning">Planned Start</th>
              <th  class="bg-warning">Planned Finish</th>
              <th  class="bg-warning">Actual Start</th>
              <th  class="bg-warning">Actual Finish</th>            
              <th  class="bg-warning">Actual Work</th>
              <th  class="bg-warning">Submitted</th>
              <th  class="bg-warning">Complete</th>   
              <th  class="bg-warning">Comment</th>         
              <th  class="bg-warning">Status</th>
              <th  class="bg-warning">Action</th>
          </tr>
        </thead>
        <tbody>
          <% incompleteTasks.forEach(activity => { %>
            <tr class="tableData" id="row-<%= activity._id %>">
              <td class="border border-gray-300 px-1 py-1 "><%= activity.clientName %></td>
              <td class="border border-gray-300 px-1 py-1 "><%= activity.interventionName %></td>
              <td class="border border-gray-300 px-1 py-1 "><%= activity.taskName %></td>
              <td class="border border-gray-300 px-1 py-1 "><%= new Date(activity.start).toLocaleDateString('en-GB') %></td>
              <td class="border border-gray-300 px-1 py-1 "><%= new Date(activity.Finish).toLocaleDateString('en-GB') %></td>
              <td class="border border-gray-300 px-1 py-1 "><%= activity.actualStart ? new Date(activity.actualStart).toLocaleDateString('en-GB') : " " %></td>
              <td class="border border-gray-300 px-1 py-1 "><%= activity.actualFinish ? new Date(activity.actualFinish).toLocaleDateString('en-GB') : " " %></td>
              <td class="border border-gray-300 px-1 py-1 "><%= activity.actualWork %></td>
              <td class="border border-gray-300 px-1 py-1 "><%= activity.submitted ? "Yes" : "No" %></td>
              <td class="border border-gray-300 px-1 py-1 "><%= (activity.leapComplete < 100) ? "No" : "Yes" %></td>
              <td class="border border-gray-300 px-1 py-1 "><%= activity.userComment %></td>
              <td class="border border-gray-300 px-1 py-1 "><%= activity.approvalStatus %></td>
              <td class="text-center px-2"><button class="btn update-btn border border-gray-300" data-id="<%= activity._id %>">Update</button><button class="btn  save-btn border border-gray-300 hidden" data-id="<%= activity._id %>">Edit</button></td>
            </tr>
          <% }); %>
          <tr>
            <td colspan="6" class="border border-gray-300 px-1 py-1 "> Total work hours: <span id="totalWork"></span></td>
            <td colspan="6" class="border border-gray-300 px-1 py-1 "><button class="btn" id="submitToManager">Submit To Manager</button></td>
          </tr>
        </tbody>
      </table>
  </div>
  
  
  <!-- Modal for static backdrop HOW IT WORKS -->
  <div class="modal fade" id="staticBackdropHow" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="staticBackdropLabel">How it works?</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <p>1. All tasks assigned in Microsoft Project for the current week will appear here.</p>
          <p>2. To log work on a task assigned by Project Manager, click the EDIT button to enter the details.</p>
          <p>3. Add the Actual Start and Finish Date and the number of hours worked on the task.</p>
          <p>4. If a task is incomplete, choose "No, needs more work". This allows you to update it later with additional work hours.</p>
          <p>5. If a task is complete, enter the details and choose the option to "mark it as complete" and SAVE/UPDATE.</p>
          <p>6. If you are working on a previously incomplete task, enter the hours worked on that particular day and UPDATE.</p>
          <p>7. Please update the tasks which are incomplete every day.</p>
          <p>8. At the end of the week, click SUBMIT TO MANAGER so the manager can review and approve your tasks and work done.</p>
          <p>9. If you are working on a task not assigned by the Project Manager, click ADD A TASK and enter the details. If a task is incomplete, choose No, needs more work. This allows you to update it later with additional work hours. If a task is complete, enter the details and choose the option to mark it as complete and SAVE.</p>
         </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Got it!</button>
          <!-- <button type="button" class="btn btn-primary">Understood</button> -->
        </div>
      </div>
    </div>
  </div>
  
  <!-- save PWA task modal form -->
  <div class="modal fade" id="saveModal" tabindex="-1" aria-labelledby="saveModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="saveModalLabel">Fill TimeSheet for Task</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="saveForm" action="/savetask" method="post">
                    <div class="mb-3">
                        <label for="projectName" class="form-label">Project Name</label>
                        <input type="text" class="form-control" id="projectName" name="projectName" readonly>
                    </div>
                    <div class="mb-3">
                        <label for="taskName" class="form-label">Task Name</label>
                        <input type="text" class="form-control" id="taskName" name="taskName" readonly>
                    </div>
                    <div class="mb-3">
                        <label for="scheduledStart" class="form-label">Planned Start</label>
                        <input type="text" class="form-control" id="scheduledStart" name="scheduledStart" readonly>
                    </div>
                    <div class="mb-3">
                        <label for="scheduledFinish" class="form-label">Planned Finish</label>
                        <input type="text" class="form-control" id="scheduledFinish" name="scheduledFinish" readonly>
                    </div>
                    <div class="mb-3">
                        <label for="actualStart" class="form-label">Actual Start</label>
                        <input type="date" class="form-control" id="actualStart" name="actualStart">
                    </div>
                    <div class="mb-3">
                        <label for="actualFinish" class="form-label">Actual Finish (Tentative date if task is incomplete)</label>
                        <input type="date" class="form-control" id="actualFinish" name="actualFinish">
                    </div>
                    <div class="mb-3">
                        <label for="actualWork" class="form-label">Actual Work (In Hours)</label>
                        <input type="number" class="form-control" id="actualWork" name="actualWork">
                    </div>
                    <div class="mb-3">
                      <label for="status_sv" class="form-label">Is the task Completed?</label>
                      <select id="status_sv" class="form-select my-2" name="completed" aria-label="Default select example" required>  
                        <option selected>Pick an option.</option>                    
                        <option value=0>No, Needs more work.</option>
                        <option value=100>Yes, Mark as completed.</option>
                      </select>
                  </div>
                    <div class="mb-3">
                        <label for="comment" class="form-label">Comment</label>
                        <input type="text" class="form-control" id="comment" name="comment">
                    </div>
                    <input type="hidden" id="activityId" name="activityId">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn" id="submitSave">Save Task</button>
                </form>
            </div>
            <div class="modal-footer">
                <!-- <p> Caution! Once submitted, you cannot make any changes to this Task.</p> -->
            </div>
        </div>
    </div>
  </div>
  
  <!-- Button trigger NEW Task modal -->
   <p class="ms-5">Don't see the task you want to save, add a new one!</p>
  <button type="button" class="btn ms-5 " style="width: 9rem;" data-bs-toggle="modal" data-bs-target="#staticBackdropNew">
    Add NEW Task
  </button>
  
  <!-- Modal FOR NEW TASK-->
  <div class="modal fade" id="staticBackdropNew" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="staticBackdropLabel">Save a new task.</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <Form id="addTaskForm" action="/profile" method="post">
            <label for="" class="form-label">Project Name</label>
            <input type="text" class="form-control readonly" name="projectName" id="", value="Administrative" readonly> <br>
            <label for="" class="form-label">Task</label>
            <select class="form-select my-2" name="taskName" aria-label="Default select example" required>
              <option selected>Pick a task from the list.</option>
              <option value="Break">Break</option>
              <option value="Chrysalis: Administrative Work">Chrysalis: Administrative Work</option>
              <option value="Chrysalis: Automation">Chrysalis: Automation</option>
              <option value="Chrysalis: Client Acquisition">Chrysalis: Client Acquisition</option>
              <option value="Chrysalis: Internal meetings/calls">Chrysalis: Internal meetings/calls</option>
              <option value="Chrysalis: Research">Chrysalis: Research</option>
              <option value="Chrysalis: Internal Projects">Chrysalis: Internal Projects</option>
              <option value="Chrysalis: Self Development">Chrysalis: Self Development</option>
            </select>
            <label for="" class="form-label">Start Date</label>
            <input type="date" class="form-control" name="actualStart" required> <br>
            <label for="" class="form-label">Finish Date (tentative date if task is incomplete)</label>
            <input type="date" class="form-control" name="actualFinish" required> <br>
            <label for="" class="form-label">Work (in Hours)</label>
            <input type="number" class="form-control mb-2" name="actualWork" required>
            <label for="status_nt" class="form-label">Is the task Completed?</label>
            <select id="status_nt" class="form-select my-2" name="completed" aria-label="Default select example" required>
              <option selected>Pick an option.</option>
              <option value=0>No, Needs more work.</option>
              <option value=100>Yes, Mark as completed.</option>
            </select>
            <div class="mb-3">
              <label for="" class="form-label">userComment</label>
              <textarea class="form-control" name="userComment" id="" rows="3" placeholder="Your comments please."></textarea>
            </div>
            <!-- <p> Alert! Once submitted, you cannot make any changes.</p> -->
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button type="submit" class="btn btn-primary" id="addTaskBtn" >Save</button>
          </Form>
        </div>
      </div>
    </div>
  </div>
  
   <!-- Update task modal form -->
  <div class="modal fade" id="updateModal" tabindex="-1" aria-labelledby="updateModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="updateModalLabel">Update TimeSheet</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="updateForm" action="/updatetask" method="post">
                  
                    <div class="mb-3">
                        <label for="projectName_uf" class="form-label">Project Name</label>
                        <input type="text" class="form-control readonly" id="projectName_uf" name="projectName" readonly>
                    </div>
                    <div class="mb-3">
                        <label for="taskName_uf" class="form-label">Task Name</label>
                        <input type="text" class="form-control readonly" id="taskName_uf" name="taskName" readonly>
                    </div>
                    <div class="mb-3">
                        <label for="scheduledStart_uf" class="form-label">Planned Start</label>
                        <input type="text" class="form-control readonly" id="scheduledStart_uf" name="scheduledStart" readonly>
                    </div>
                    <div class="mb-3">
                        <label for="scheduledFinish_uf" class="form-label">Planned Finish</label>
                        <input type="text" class="form-control readonly" id="scheduledFinish_uf" name="scheduledFinish" readonly>
                    </div>
                    <div class="mb-3">
                        <label for="actualStart_uf" class="form-label">Actual Start</label>
                        <input type="text" class="form-control readonly" id="actualStart_uf" name="actualStart" readonly>
                    </div>
                    <div class="mb-3">
                      <label for="workSoFar_uf" class="form-label">Work (in hours) done so far...</label>
                      <input type="number" class="form-control readonly" id="workSoFar_uf" name="workSoFar" readonly>
                  </div>
                    <div class="mb-3">
                        <label for="actualWork_uf" class="form-label">Add Work in Hours for this update</label>
                        <input type="number" value=0 class="form-control" id="actualWork_uf" name="actualWork" >
                    </div>
                    <div class="mb-3">
                        <label for="comment_uf" class="form-label">Comment</label>
                        <input type="text" class="form-control" id="comment_uf" name="comment" placeholder="Enter a new comment for this update.">
                    </div>
                    <div class="mb-3">
                      <label for="status_uf" class="form-label">Is the task Completed?</label>
                      <select id="status_uf" class="form-select my-2" name="completed" aria-label="Default selected" required>   
                        <option selected>Pick an option.</option>                   
                        <option value=0>No, Needs more work.</option>
                        <option value=100>Yes, Mark as completed.</option>
                      </select>
                  </div>
                  <div class="mb-3"  id="actualFinishContainer">
                    <label for="actualFinish_uf" class="form-label">Actual Finish</label>
                    <input type="date" class="form-control" id="actualFinish_uf" name="actualFinish">
                  </div> 
                    <input type="hidden" id="activityId_uf" name="activityId">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary" id="submitUpdate">Update Task</button>
                </form>
            </div>
            <div class="modal-footer">
                <!-- <p> Caution! Once submitted, you cannot make any changes to this Task.</p> -->
            </div>
        </div>
    </div>
  </div>
  <div class="nothing">

  </div>
  <div class="footer">
    <h4 class="footext">That was all!  </h4>
    <!-- <p style=" text-align: center; position: relative; bottom: 1px;">Copyright © 2024  <a href="https://chrysalis.in" style="text-decoration: none;">Chrysalis HRD</a></p> -->
  </div>
</div>

<button id="topButton" onclick="scrollToTop()">TOP</button>

<script>
    // Show the button when the user scrolls down 20px from the top of the document
    window.onscroll = function() {scrollFunction()};

    function scrollFunction() {
        if (document.body.scrollTop > 50 || document.documentElement.scrollTop > 50) {
            document.getElementById("topButton").style.display = "block";
        } else {
            document.getElementById("topButton").style.display = "none";
        }
    }

    // Scroll to the top of the document
    function scrollToTop() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
</script>


  <!-- below script to submit all the tasks on /profile and make submitted = 1 -->
  <script>
    document.getElementById('submitToManager').addEventListener('click', function() {
      fetch('/submitToManager', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ submitted: 1 })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          window.location.reload();
          alert('All tasks submitted successfully!');
          // Optionally, update the UI to reflect the changes
        } else {
          alert('Failed to submit tasks. Refresh the page and try again.');
        }
      })
      .catch(error => console.error('Error:', error));
    });
  </script>
  
   <!-- below script for NEW task form  (that is /profile) validation -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
        const form = document.querySelector('#addTaskForm');
        const submitButton = document.querySelector('#addTaskBtn');
    
        submitButton.addEventListener('click', function(event) {
            // Prevent the form from submitting
            event.preventDefault();
    
            // Get form fields
            const completed = form.querySelector('select[name="completed"]');
            const taskName = form.querySelector('select[name="taskName"]');
            const actualStart = form.querySelector('input[name="actualStart"]');
            const actualFinish = form.querySelector('input[name="actualFinish"]');
            const actualWork = form.querySelector('input[name="actualWork"]');
    
            // Validate the taskName field
            if (taskName.value === "Pick a task from the list.") {
                alert('Please select a valid task.');
                return;
            }                     
    
            // Validate the date fields
            if (!actualStart.value) {
                alert('Please enter a start date.');
                return;
            }
    
            if (!actualFinish.value) {
                alert('Please enter a finish date.');
                return;
            }
            
            // validate actual finish date is greater than or equal to actualStart date
            if(actualFinish.value < actualStart.value){
              alert('Task cannot finish before start.')
              return;
            }

            // Validate the actualWork field
            if (!actualWork.value) {
                alert('Please enter the work hours.');
                return;
            }
            if (actualStart.value == actualFinish.value && parseFloat(actualWork.value) > 9) {
                  alert('Workaholic! Work hours cannot be more than 9 in a day.');
                  return;
              }
              
            // Additional validation for "Break" task
          if (taskName.value === "Break") {
            if (actualStart.value !== actualFinish.value) {
                alert('For "Break", the start and finish dates must be the same.');
                return;
            }
            if (parseFloat(actualWork.value) > 8) {
                alert('For "Break", the work hours must not exceed 8.');
                return;
            }
          }
          // validate completed status of the task
          if (completed.value === "Pick an option.") {
                alert('Please select a valid option for task completion.');
                return;
            }
    
            // If all validations pass, submit the form
            form.submit();
        });
      });
    </script>
    <!-- below script to validate save task form -->
    <script>
      document.addEventListener('DOMContentLoaded', function() {
          const form = document.querySelector('#saveForm');
          const submitButton = document.querySelector('#submitSave');
      
          submitButton.addEventListener('click', function(event) {
              // Prevent the form from submitting
              event.preventDefault();
      
              // Get form fields     
              const completed = form.querySelector('select[name="completed"]');        
              const actualStart = form.querySelector('input[name="actualStart"]');
              const actualFinish = form.querySelector('input[name="actualFinish"]');
              const actualWork = form.querySelector('input[name="actualWork"]');      
      
              // Validate the date fields
              if (!actualStart.value) {
                  alert('Please enter a start date.');
                  return;
              }
      
              if (!actualFinish.value) {
                  alert('Please enter a finish date.');
                  return;
              }

              if(actualStart.value > actualFinish.value) {
                alert('Task cannot Finish before Start!');
                return;
              }
      
              // Validate the actualWork field
              if (!actualWork.value) {
                  alert('Please enter the work hours.');
                  return;
              }
              // Additional validation for "Break" task
            
              if (actualStart.value == actualFinish.value && parseFloat(actualWork.value) > 8) {
                  alert('Workaholic! Work hours cannot be more than 8 in a day.');
                  return;
              }
              if (completed.value === "Pick an option.") {
                alert('Please select a valid option for task completion.');
                return;
            }
              
              // If all validations pass, submit the form
              form.submit();
          });
        });
      </script>
    <!-- below script to validate update form submissions -->
    <script>
      document.addEventListener('DOMContentLoaded', function() {
          const form = document.querySelector('#updateForm');
          const UpdateButton = document.querySelector('#submitUpdate');
      
          UpdateButton.addEventListener('click', function(event) {
              // Prevent the form from submitting
              event.preventDefault();
      
              // Get form fields
              const completed = form.querySelector('select[name="completed"]');
              const actualWork = form.querySelector('input[name="actualWork"]');
              const comment = form.querySelector('input[name="comment"]');

            //validation for task to be less than 9 hours
            if(actualWork >8){
              alert('Task cannot have more than 8 hours work in one update. If you have worked more than 8 hours, update again to add more hours of work to this task.');
              return;
            }
            //validation for comment
            if(!comment){
              alert('Please enter a comment for this update to task progress.');
              return;
            }
            // validate completed status of the task
            if (completed.value === "Pick an option.") {
                  alert('Please select a valid option for task completion.');
                  return;
              }
      
              // If all validations pass, submit the form
              form.submit();
          });
        });
      </script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const statusSelect = document.getElementById('status_uf');
    const actualFinishContainer = document.getElementById('actualFinishContainer');
    // Function to toggle visibility
    function toggleActualFinish() {
      if (statusSelect.value === '100') {
        actualFinishContainer.style.display = 'block';
      } else {
        actualFinishContainer.style.display = 'none';
      }
    }
    // Initial check
    toggleActualFinish();
    // Add event listener
    statusSelect.addEventListener('change', toggleActualFinish);
  });
</script>
 <!-- script to get number of work hours for the member on each day of the week.  -->
  <script>
    const tasks = <%- JSON.stringify(incompleteTasks) %>;
    tasks.forEach( task => {
      const taskName = task.taskName;
      const comment = task.userComment;
      const regex = /\((\d{2}\/\d{2}\/\d{4}): (\d+) Hrs\)/g;

      const result = {};
      let match;

      while ((match = regex.exec(comment)) !== null) {
        const date = match[1];
        const hours = parseInt(match[2], 10);
        if (result[date]) {
            result[date] += hours; // Add hours if date already exists
        } else {
          result[date] = hours; // Initialize with hours if date doesn't exist
        }
      }
    });
</script>
<script src="/javascripts/bootstrap.bundle.min.js"></script>
</body>